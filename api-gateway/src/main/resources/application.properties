eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka

spring.application.name=api-gateway

#increasing the logging level of the api-gateway application
logging.level.root=INFO
#Class responsible for defining and identifying the route for the incoming request. +1
logging.level.org.springframework.cloud.gateway.route.RouteDefinitionLocator = INFO
logging.level.org.springframework.cloud = TRACE

#with what we wrote above we can get a deep understanding of what is happening behind the scene once a request comes in.

###GATEWAY
#Product Service Route
#Every route must have an id +1
#that is the url to the instance+ 2. N.B the "lb" is there because of loadBalancing and for it to visit the discovery server first and
# get the real url of product service. if it was http used it would bypass the service discovery/discovery server and head to
# instance straight but this will result in a UnknownHostException as there the name product-service is not a hostname but a
# mask covering the real hostname/url
# If we weren't using discoverý server then that name wouldn't be product service.
# it would have been the url(localhost:8084)
#when a request comes with the path api/product, it directs it to the product service instance will have in step 2
spring.cloud.gateway.routes[0].id=product-service
spring.cloud.gateway.routes[0].uri=lb://product-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/v1/product

#Order Service Route
spring.cloud.gateway.routes[1].id=order-service
spring.cloud.gateway.routes[1].uri=lb://order-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/v1/order

spring.cloud.gateway.routes[2].id=order-service
spring.cloud.gateway.routes[2].uri=lb://order-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/v1/order/all

spring.cloud.gateway.routes[3].id=inventory-service
spring.cloud.gateway.routes[3].uri=lb://inventory-service
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/v1/inventory/all

#spring.cloud.gateway.routes[3].id=discovery-server
#spring.cloud.gateway.routes[3].uri=http://localhost:8761
#spring.cloud.gateway.routes[3].predicates[0]=Path=/eureka/**
#spring.cloud.gateway.routes[3].filters[0]=SetPath=/

spring.cloud.gateway.routes[4].id=discovery-server
spring.cloud.gateway.routes[4].uri=http://localhost:8761
spring.cloud.gateway.routes[4].predicates[0]=Path=/eureka/web
spring.cloud.gateway.routes[4].filters[0]=SetPath=/

spring.cloud.gateway.routes[5].id=discovery-server-static
spring.cloud.gateway.routes[5].uri=http://localhost:8761
spring.cloud.gateway.routes[5].predicates[0]=Path=/eureka/**

#This sets up the OAuth2 resource server for JWT token validation but doesn?t apply it to the specific routes in your Gateway.
# For you to enforce validation you must explicitly configure your security class to
# enforce OAuth2 checks on all routes, if not adding another security implementation to any service may overide the
# Oauth2 implementation when a request comes for that service
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8087/realms/spring-boot-microservices-realm


###ZIPKIN
spring.zipkin.base-url=http://localhost:9411
#send 100% of the requests received on your machine to zipkin
spring.sleuth.sampler.probability=1.0


