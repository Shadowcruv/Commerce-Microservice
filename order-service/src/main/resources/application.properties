server.port=8082

spring.application.name=order-service

spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/orderDb
spring.datasource.username=appuser
spring.datasource.password=app_password
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MariaDBDialect

#declaring the url of the server you created for the client to register
eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka

##Actuator -monitoring health metrics for your application

#Enabling the circuit breakers endpoint in the actuator
management.health.circuitbreakers.enabled=true
#Enable all kinds of endpoint. By default it would only expose the health metrics endpoint
management.endpoints.web.exposure.include=*
#show health details
management.endpoint.health.show-details=always


###Resilence4J properties

# registerhealthIndicator because we want to see the different States of circuitbreaker
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
# how much buffer size is going to for the event
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
#so as to be able to determine when to open and close the
# circuitbreaker based on the number of requests then we use a slidingWindowType mechanism
resilience4j.circuitbreaker.instances.inventory.sliding-window-type=COUNT_BASED
#After 5 failed requests the sliding window will change the close to open state
resilience4j.circuitbreaker.instances.inventory.sliding-window-size=5
resilience4j.circuitbreaker.instances.inventory.failure-rate-threshold=50
#secs to stay in the open state before it goes to half-open state
resilience4j.circuitbreaker.instances.inventory.wait-duration-in-open-state=5s
#how many calls you have to allow in the half-open state to check if connection is now good
resilience4j.circuitbreaker.instances.inventory.permitted-number-of-calls-in-half-open-state=3
#self explanatory
resilience4j.circuitbreaker.instances.inventory.automatic-transition-from-open-to-half-open-enabled=true

#Resilience4J Timeout Properties
#time to wait for the method that is annotated with the Timelimiter to execute before it executes the fallback method
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

###ZIPKIN AND SLEUTH
spring.zipkin.base-url=http://localhost:9411
#send 100% of the requests received on your machine to zipkin
spring.sleuth.sampler.probability=1.0


##KAFKA Properties
#list of server where you can find kafka installation. we are using local installation so the url would be the 9092
spring.kafka.bootstrap-servers=localhost:9092
#so that you wouldn't be explicitly defining this topic every place you want to send message with kafka
spring.kafka.template.default-topic=notificationTopic
#serialize the key before sending
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#serialize/convert the object to json before sending
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# This property is so that spring will know how to map your object to the one in your consumer.
# Thats why you are defining the fully qualified name. Note that the token name here "event" can be anything, but
# it should be thesame name used in the Consumer class
spring.kafka.producer.properties.spring.json.type.mapping=event:com.order.event.OrderPlacedEvent